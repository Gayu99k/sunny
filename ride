//serviceimpl
	 public String cancelRide(int rideId, CancelBookingDTO cancelBookingDTO) throws InfyRideException {

	Optional<RideEntity> ridentity=rideRepository.findById(rideId);
    if(!ridentity.isPresent()) {
        throw new InfyRideException(InfyRideConstants.INFYRIDE_RIDEID_NOT_FOUND.toString());  
    }
    RideEntity rideEntity=ridentity.get();
    if(rideEntity.getStatus().equals("COMPLETED")) {
        throw new InfyRideException(InfyRideConstants.INFYRIDE_CANCEL_RIDE_ALREADY_COMPLETED.toString());
       }
   if(rideEntity.getStatus().equals(CANCELLED)) {
        throw new InfyRideException(InfyRideConstants.INFYRIDE_CANCEL_RIDE_ALREADY_CANCELLED.toString());
        }
rideEntity.setStatus(CANCELLED);    
rideEntity.setReasonForCancellation(cancelBookingDTO.getReasonForCancellation());
rideRepository.save(rideEntity);
return environment.getProperty(InfyRideConstants.INFYRIDE_CANCEL_SUCCESS.toString());
}
	 
	 

              //RideDTO
	 @NotBlank(message="{ride.pickuplocation.notpresent}")
     @Pattern(regexp="([a-zA-Z0-9,-/\\s])+", message= "{ride.pickuplocation.invalid}")
      private String pickupLocation;
      
      @NotBlank(message="{ride.droplocation.notpresent}")
      @Pattern(regexp="([a-zA-Z0-9,-/\\s])+" , message= "{ride.droplocation.invalid}")
      private String dropLocation;

      @NotNull(message="{ride.datetime.notpresent}")
      @Future(message="{ride.datetime.invalid}")
  private LocalDateTime rideDateTime;

	 //cancelDTO
      @NotNull(message="{ride.reasonforcancellation.notpresent}")
      @Pattern(regexp = "(?=.*[a-zA-Z0-9].*)[a-zA-Z0-9.,! ]*",message="{ride.reasonforcancellation.invalid}")
       
         private String reasonForCancellation;

      
    //ExceptionControllerAdvice--
	   @RestControllerAdvice
	   //public class ExceptionControllerAdvice
	   @ExceptionHandler(Exception.class)
	   public ResponseEntity<ErrorInfo> generalExceptionHandler(Exception ex){
		   logger.error(ex.getMessage(),ex);
		   ErrorInfo errorInfo = new ErrorInfo();
		   errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
		   errorInfo.setErrorMsg(environment.getProperty(InfyRideConstants.INFYRIDE_EXCEPTIONMSG_GENERAL.toString()));
		   return new ResponseEntity<>(errorInfo,HttpStatus.INTERNAL_SERVER_ERROR);
	   }
	   @ExceptionHandler(InfyRideException.class)
	   public ResponseEntity<ErrorInfo>infyRideExceptionHandler(InfyRideException ex){
		   logger.error(ex.getMessage(),ex);
		   ErrorInfo errorInfo = new ErrorInfo();
		   errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
		   errorInfo.setErrorMsg(environment.getProperty(ex.getMessage()));
		   return new ResponseEntity<>(errorInfo,HttpStatus.BAD_REQUEST);
	   }
	   @ExceptionHandler({MethodArgumentNotValidException.class,ConstraintViolationException.class})
	    public ResponseEntity<ErrorInfo>exceptionHandler(Exception ex){}
	 //controller
       
       @RestController
     @Validated
     public class InfyRideController {

       @Autowired
       private InfyRideService infyRideService;
       
      
       @GetMapping(value="/ride/{pickupLocation}/{dropLocation}")
       public String getEstimatedFare(@PathVariable String pickupLocation,@PathVariable String dropLocation) throws InfyRideException {
           String successMessage=infyRideService.getEstimatedFare(pickupLocation.trim(),dropLocation.trim());
           return successMessage;  
       }
       
       
       @PostMapping(value="/ride")
       public String bookRide(@Valid @RequestBody RideDTO rideDTO) throws InfyRideException {
           String successMessage=infyRideService.bookRide(rideDTO);
           return successMessage;
       }

       @PutMapping(value="/ride/{rideId}/{newPickupLocation}")
       public String updateRide(@PathVariable @Min(value=1,message="{ride.rideid.invalid}")
       int rideId,@PathVariable String newPickupLocation) throws InfyRideException {
           String successMessage=infyRideService.updateRide(rideId,newPickupLocation);
           return successMessage;
       }
      
       @DeleteMapping(value="/ride/{rideId}")
       public String cancelRide(@PathVariable("rideId") @Min(value=1,message="{ride.rideid.invalid}")
       int rideId, @Valid @RequestBody CancelBookingDTO cancelBookingDTO ) throws InfyRideException{
           String successMessage=infyRideService.cancelRide(rideId,cancelBookingDTO);
           return successMessage;
           
       }
       
